from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, filters
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
import asyncio
import aioschedule
import config
import keyboards
import db
import date
import datetime


class CreateEvent(StatesGroup):
    event_name = State()
    event_organization = State()
    event_data = State()
    event_time = State()
    event_price = State()
    event_location = State()
    action = State()


storage = MemoryStorage()
bot = Bot(token=config.token)
dp = Dispatcher(bot=bot, storage=storage)
white_users = config.white_users
admin = config.admin
user = config.user
watch_user = config.watch_user
watch_users = config.watch_users
check_data = r'\d{2}\.\d{2}.\d{4}'
check_time = r'\d{2}\:\d{2}'


@dp.message_handler(filters.IDFilter(user_id=white_users), commands=['start'])
async def start(message: types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø —É–º–µ—é —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—É—á—É —Å–æ–±—ã—Ç–∏–π –∏ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ–± —ç—Ç–æ–º\n'
                         '–ü–æ–ø—Ä–æ–±—É–µ–º? –ù–∞–ø–∏—à–∏ /help –∏ –≤—Å–µ —É–∑–Ω–∞–µ—à—åüï∞', reply_markup=keyboards.started)


@dp.message_handler(filters.IDFilter(user_id=watch_user), commands=['start'])
async def start(message: types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø —É–º–µ—é —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—É—á—É —Å–æ–±—ã—Ç–∏–π –∏ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ–± —ç—Ç–æ–º.\n'
                         '–ü–æ–ø—Ä–æ–±—É–µ–º? –ù–∞–ø–∏—à–∏ /help –∏ –≤—Å–µ —É–∑–Ω–∞–µ—à—åüï∞', reply_markup=keyboards.started_user)


@dp.message_handler(commands=['cancel'], state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer('–æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboards.started)


@dp.message_handler(filters.IDFilter(user_id=white_users), commands=['help'])
async def cmd_help(message: types.Message):
    await message.answer(text='–£ –Ω–∞—Å —Å —Ç–æ–±–æ–π –µ—Å—Ç—å –ø–∞—Ä–æ—á–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π:\n'
                              '/create - —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ\n'
                              '/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ(—Ä–ø–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è)\n'
                              '/today - —Å–æ–±—ã—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è\n'
                              '/tomorrow - —Å–æ–æ–±—ã—Ç–∏—è –∑–∞–≤—Ç—Ä–∞\n'
                              '/nearest - –±–ª–∏–∂–∞–π—â–µ–µ —Å–æ–±—ã—Ç–∏–µ\n', reply_markup=keyboards.remove)


@dp.message_handler(filters.IDFilter(user_id=white_users), commands=['create'], state='*')
async def create_event(message: types.Message):
    date.check_data()
    await CreateEvent.event_name.set()
    await message.answer('–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', reply_markup=keyboards.remove)


@dp.message_handler(lambda x: not x.text, state=CreateEvent.event_name)
async def wrong_name(message: types.Message):
    return await message.answer('—Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ')


@dp.message_handler(lambda x: x.text, state=CreateEvent.event_name)
async def good_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['event_name'] = message.text
    await CreateEvent.next()
    await message.answer('–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π –∫–æ–º–ø–∞–Ω–∏–∏', reply_markup=keyboards.organizations)


@dp.message_handler(state=CreateEvent.event_organization)
async def add_organization(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['event_organization'] = message.text

    await CreateEvent.next()
    await message.answer('–ö–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ —É —Ç–µ–±—è –±—É–¥–µ—Ç –∑–∞–∫–∞–∑?(–¥–¥.–º–º.–≥–≥–≥–≥)', reply_markup=keyboards.remove)


@dp.message_handler(filters.Regexp(check_data), state=CreateEvent.event_data)
async def add_data(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['event_data'] = message.text

    await CreateEvent.next()
    await message.answer('–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —É —Ç–µ–±—è –±—É–¥–µ—Ç –∑–∞–∫–∞–∑?', reply_markup=keyboards.remove)


@dp.message_handler(state=CreateEvent.event_time)
async def add_time(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['event_time'] = message.text

    await CreateEvent.next()
    await message.answer('–ö–∞–∫—É—é –∑–∞—Ä–ø–ª–∞—Ç—É —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å —Å –∑–∞–∫–∞–∑–∞?', reply_markup=keyboards.remove)


@dp.message_handler(lambda message: not message.text.isdigit(), state=CreateEvent.event_price)
async def failed_price(message: types.Message):
    return await message.answer(
        '–Ω—É —ç—Ç–æ –Ω–µ —Ü–∏—Ñ—Ä—ã, –∑–Ω–∞—á–∏—Ç –≤–≤–µ–¥–∏ –∑–∞–Ω–æ–≤–æ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞')  # –µ—Å–ª–∏ —Ü–µ–Ω–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –Ω–µ —Ü–∏—Ñ—Ä–∞–º–∏


@dp.message_handler(lambda message: message.text.isdigit(), state=CreateEvent.event_price)
async def add_price(message: types.Message, state: FSMContext):
    await state.update_data(event_price=int(message.text))
    await CreateEvent.next()
    await message.answer('–û—Ç–ø—Ä–∞–≤—å –∞–¥—Ä–µ—Å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è',
                         reply_markup=keyboards.remove)


@dp.message_handler(state=CreateEvent.event_location)
async def add_location(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['event_location'] = message.text
    await CreateEvent.next()
    s = f'–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: {data["event_name"]}\n' \
        f'–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {data["event_organization"]}\n' \
        f'–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {data["event_data"]}\n' \
        f'–í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {data["event_time"]}\n' \
        f'–¶–µ–Ω–∞: {data["event_price"]}\n' \
        f'–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {data["event_location"]}\n'
    await message.answer(s, reply_markup=keyboards.remove)
    await message.answer('–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å –≤–≤–µ–¥–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏?',
                         reply_markup=keyboards.yes_no)


@dp.message_handler(state=CreateEvent.action)
async def action(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['action'] = message.text
    if data['action'].lower() == '–¥–∞':
        event = [data['event_name'], data['event_organization'], data['event_data'], data['event_time'],
                 data['event_price'], data['event_location']]
        db.add_event(event)
        await message.answer('—É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ', reply_markup=keyboards.started)
    else:
        await message.answer('–º—ã —É–¥–∞–ª–∏–ª–∏ –≤–≤–µ–¥–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', reply_markup=keyboards.started)
    await state.finish()


@dp.message_handler(filters.IDFilter(user_id=white_users), commands=['overlook'])  # Inline - –º–∏—à–∞ –ø–æ–¥—Å–∫–∞–∑–∞–ª
async def overlook(message: types.Message):
    loc = ''
    # lst = db.get_locations()
    lst = []
    for i in range(len(lst)):
        loc += f'{i + 1}) {lst[i][0]}\n'
    await message.answer('–Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ')


@dp.message_handler(filters.IDFilter(user_id=white_users), commands=['nearest'])
async def nearest(message: types.Message):
    date.check_data()
    try:
        row, time_of_nearest_event = date.nearest_event()
        time_of_nearest_event = str(time_of_nearest_event)
        event = db.all_events()[-1]
        if len(time_of_nearest_event.split()) == 1:
            day = '–ß–µ—Ä–µ–∑'
        else:
            day = '–ß–µ—Ä–µ–∑ ' + str(time_of_nearest_event.split()[0]) + '–¥–Ω,'
        time_of_near = time_of_nearest_event.split()[-1].split('.')[0].split(':')
        nearest_event = f'{day} {time_of_near[0]}—á–∞—Å {time_of_near[1]}–º–∏–Ω {time_of_near[2]}—Å–µ–∫ —É –≤–∞—Å –±—É–¥–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ. ' \
                        f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏:\n' \
                        f'–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: {event[1]}\n' \
                        f'–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {event[2]}\n' \
                        f'–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {event[3]}\n' \
                        f'–í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {event[4]}\n' \
                        f'–¶–µ–Ω–∞: {event[5]}\n' \
                        f'–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {event[6]}\n'
        await message.answer(nearest_event, reply_markup=keyboards.started)
    except:
        await message.answer(
            '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Å–≤—è–∑–∞–Ω–∞ —Å —Ç–µ–º, —á—Ç–æ –≤—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –µ—â–µ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è!')


@dp.message_handler(filters.IDFilter(user_id=watch_users + [user]), commands=['today'])
async def today(message: types.Message):
    time_now = '.'.join(str(datetime.datetime.now()).split()[0].split('-')[::-1])
    s, suma = date.defer(time_now)
    await message.answer(s)
    if suma:
        await message.answer(f'–ò—Ç–æ–≥–æ –∑–∞ {time_now} –≤—ã –ø–æ–ª—É—á–∏—Ç–µ: {suma}‚ÇΩ')


@dp.message_handler(filters.IDFilter(user_id=watch_users + [user]), commands=['tomorrow'])
async def tomorrow(message: types.Message):
    time_now = '.'.join(str(datetime.date.today() + datetime.timedelta(days=1)).split('-')[::-1])
    s, suma = date.defer(time_now)
    await message.answer(s)
    if suma:
        await message.answer(f'–ò—Ç–æ–≥–æ –∑–∞ {time_now} –≤—ã –ø–æ–ª—É—á–∏—Ç–µ: {suma}‚ÇΩ')


@dp.message_handler(filters.IDFilter(user_id=white_users), filters.Regexp(check_data))
async def random_data(message: types.Message):
    time_now = message.text
    s, suma = date.defer(time_now)
    await message.answer(s)
    if suma:
        await message.answer(f'–ò—Ç–æ–≥–æ –∑–∞ {time_now} –≤—ã –ø–æ–ª—É—á–∏—Ç–µ: {suma}‚ÇΩ')


@dp.message_handler(filters.IDFilter(user_id=watch_users), commands=['admin'])
async def admin(message: types.Message):
    await message.answer('—á—Ç–æ —É–º–µ–µ—Ç –∞–¥–º–∏–Ω?', reply_markup=keyboards.admin)


@dp.message_handler(commands=['all_events'])
async def all_ev(message: types.Message):
    events = ''
    for i in db.all_events():
        id_id = i[0]
        date_date = ' '.join(i[3:5])
        s = f'{id_id}) {date_date} - {i[1]}({i[2]} - {i[6]}). price = {i[5]}\n'
        events += s
    if not events:
        events = '0 —Å–æ–±—ã—Ç–∏–π'
    await message.answer(events)


# –±–∞–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
@dp.message_handler()
async def evening_output(message: types.Message):
    await message.answer('—è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, —Ç—ã –Ω–∞–≤–µ—Ä–Ω–æ–µ –æ—à–∏–±—Å—è')


# –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
async def morning_reminder():
    time_now = '.'.join(str(datetime.datetime.now()).split()[0].split('-')[::-1])
    s, suma = date.defer(time_now)
    await bot.send_message(chat_id=user, text=s)


async def evening_reminder():
    await asyncio.sleep(1)
    now = datetime.datetime.now()
    time_now = '.'.join(str(now).split()[0].split('-')[::-1])
    s, suma = date.defer(time_now)
    current_time = now.strftime("%H:%M:%S")
    if current_time == '22:30:00':
        await bot.send_message(chat_id=user, text=f'–ò—Ç–æ–≥–æ –∑–∞ –≤–µ—Å—å –¥–µ–Ω—å –≤—ã –ø–æ–ª—É—á–∏–ª–∏: {suma}‚ÇΩ')


async def scheduler():
    aioschedule.every().day.at("06:00").do(morning_reminder)
    aioschedule.every().day.at("00:00").do(evening_reminder)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)


async def on_startup(_):
    asyncio.create_task(scheduler())


if __name__ == "__main__":
    db.start_db()
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
